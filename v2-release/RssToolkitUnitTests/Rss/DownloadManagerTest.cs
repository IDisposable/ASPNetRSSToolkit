// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using RssToolkit.Rss;
using System.Xml;
namespace RssToolkitUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Rss.DownloadManager and is intended
    ///to contain all RssToolkit.Rss.DownloadManager Unit Tests
    ///</summary>
    [TestClass()]
    public class DownloadManagerTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DownLoadFeedDom (string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void DownloadManagerDownLoadFeedDomTest()
        {
            DownloadManager target = RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor.CreatePrivate();
            RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor accessor = new RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor(target);
            string url = RssToolkitUnitTest.Utility.RssUtility.RssUrl;
            RssToolkitUnitTest.RssToolkit_Rss_DownloadManager_CacheInfoAccessor actual;
            actual = accessor.DownLoadFeedDom(url);
            Assert.IsTrue(actual.Data.Length > 0, "RssToolkit.Rss.DownloadManager.DownLoadFeedDom did not return the expected value.");
        }

        /// <summary>
        ///A test for GetFeed (string)
        ///</summary>
        [TestMethod()]
        public void DownloadManagerGetFeedTest()
        {
            string url = RssToolkitUnitTest.Utility.RssUtility.RssUrl;
            using (Stream actual = RssToolkit.Rss.DownloadManager.GetFeed(url))
            {
                using (XmlTextReader reader = new XmlTextReader(actual))
                {
                    while (reader.Read())
                    {
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            break;
                        }
                    }

                    string outerXml = reader.ReadOuterXml();
                    RssDocument rss = RssDocument.Load(outerXml);
                    Assert.IsTrue(outerXml.Length > 0, "RssToolkit.Rss.DownloadManager.GetFeed did not return the expected value.");
                    Assert.IsTrue(rss.Channel.Items.Count > 0, "RssToolkit.Rss.DownloadManager.GetFeed did not return the expected value.");
                }
            }

            url = RssToolkitUnitTest.Utility.RssUtility.OpmlUrl;
            using (Stream actual = RssToolkit.Rss.DownloadManager.GetFeed(url))
            {
                using (XmlTextReader reader = new XmlTextReader(actual))
                {
                    while (reader.Read())
                    {
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            break;
                        }
                    }

                    string outerXml = reader.ReadOuterXml();
                    RssDocument rss = RssDocument.Load(outerXml);
                    Assert.IsTrue(actual.Length > 0, "RssToolkit.Rss.DownloadManager.GetFeed did not return the expected value.");
                    Assert.IsTrue(rss.Channel.Items.Count > 0, "RssToolkit.Rss.DownloadManager.GetFeed did not return the expected value.");
                }
            }
        }

        /// <summary>
        ///A test for GetFeedDom (string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void DownloadManagerGetFeedDomTest()
        {
            DownloadManager target = RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor.CreatePrivate();
            RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor accessor = new RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor(target);
            string url = RssToolkitUnitTest.Utility.RssUtility.RssUrl;
            RssToolkitUnitTest.RssToolkit_Rss_DownloadManager_CacheInfoAccessor actual = accessor.GetFeedDom(url);
            Assert.IsTrue(actual.Data.Length > 0, "RssToolkit.Rss.DownloadManager.DownLoadFeedDom did not return the expected value.");
        }


        /// <summary>
        ///A test for GetTtlFromString (string, int)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void DownloadManagerGetTtlFromStringTest()
        {
            string ttlString = null; 
            int defaultTtlMinutes = 10;

            Assert.AreEqual(10, RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor.GetTtlFromString(ttlString, defaultTtlMinutes));
            ttlString = "155";
            Assert.AreEqual(155, RssToolkitUnitTest.RssToolkit_Rss_DownloadManagerAccessor.GetTtlFromString(ttlString, defaultTtlMinutes));
        }
    }
}
