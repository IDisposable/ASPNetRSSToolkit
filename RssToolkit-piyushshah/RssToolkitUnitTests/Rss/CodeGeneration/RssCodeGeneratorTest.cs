// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.CodeDom;
using System.Collections.Generic;
using System.Xml;
using System.CodeDom.Compiler;
using RssToolkit.Rss;
using System.IO;
using RssToolkit.Rss.CodeGeneration;
using RssToolkitUnitTest.Utility;

namespace RssToolkitUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Rss.CodeGeneration.RssCodeGenerator and is intended
    ///to contain all RssToolkit.Rss.CodeGeneration.RssCodeGenerator Unit Tests
    ///</summary>
    [TestClass()]
    public class RssCodeGeneratorTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        /// <summary>
        ///A test for GenerateCode (RssDocument, string, string, string, TextWriter, bool)
        ///</summary>
        [TestMethod()]
        public void RssCodeGeneratorGenerateCodeTest()
        {
            RssDocument rssDefinition = RssUtility.GetRssDocumentFromUrl();
            string outputLanguage = "cs";
            string namespaceName = "test";
            string classNamePrefix = "Test";
            StringWriter outputCode = new StringWriter();
            bool useBaseClass = true;
            RssToolkit.Rss.CodeGeneration.RssCodeGenerator.GenerateCode(rssDefinition, outputLanguage, namespaceName, classNamePrefix, outputCode, useBaseClass);
            TestConditions(outputCode.ToString());
        }

        /// <summary>
        ///A test for GenerateCode (string, string, string, string, string, TextWriter, bool)
        ///</summary>
        [TestMethod()]
        public void RssCodeGeneratorGenerateCodeTest1()
        {
            string codeXml = RssUtility.RssXml;
            string outputLanguage = "cs";
            string namespaceName = "test";
            string classNamePrefix = "Test";
            StringWriter outputCode = new StringWriter();
            bool useBaseClass = true;
            RssToolkit.Rss.CodeGeneration.RssCodeGenerator.GenerateCode(codeXml, RssUtility.RssUrl, outputLanguage, namespaceName, classNamePrefix, outputCode, useBaseClass);
            TestConditions(outputCode.ToString());
        }

        /// <summary>
        ///A test for GenerateCodeDomTree (RssDocument, string, string, CodeCompileUnit, bool)
        ///</summary>
        [TestMethod()]
        public void RssCodeGeneratorGenerateCodeDomTreeTest()
        {
            RssDocument rssDefinition = RssUtility.GetRssDocumentFromUrl();
            string namespaceName = "test";
            string outputLanguage = "cs";
            string classNamePrefix = "Test";
            StringWriter outputCode = new StringWriter();
            bool useBaseClass = true;
            // generate the CodeDom tree
            // get the CodeDom provider for the language
            CodeDomProvider provider = CodeDomProvider.CreateProvider(outputLanguage);
            CodeCompileUnit unit = new CodeCompileUnit();
            RssToolkit.Rss.CodeGeneration.RssCodeGenerator.GenerateCodeDomTree(rssDefinition, namespaceName, classNamePrefix, unit, useBaseClass);

            // generate source
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BlankLinesBetweenMembers = true;
            options.BracingStyle = "Block";
            options.ElseOnClosing = false;
            options.IndentString = "    ";

            provider.GenerateCodeFromCompileUnit(unit, outputCode, options);

            TestConditions(outputCode.ToString());
        }

        /// <summary>
        ///A test for GenerateCodeDomTree (string, string, string, string, CodeCompileUnit, bool)
        ///</summary>
        [TestMethod()]
        public void RssCodeGeneratorGenerateCodeDomTreeTest1()
        {
            string codeXml = RssUtility.RssXml;
            string url = RssUtility.RssUrl;
            string namespaceName = "test";
            string outputLanguage = "cs";
            string classNamePrefix = "Test";
            StringWriter outputCode = new StringWriter();
            bool useBaseClass = true;
            // generate the CodeDom tree
            // get the CodeDom provider for the language
            CodeDomProvider provider = CodeDomProvider.CreateProvider(outputLanguage);
            CodeCompileUnit unit = new CodeCompileUnit();
            RssToolkit.Rss.CodeGeneration.RssCodeGenerator.GenerateCodeDomTree(codeXml, url, namespaceName, classNamePrefix, unit, useBaseClass);

            // generate source
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BlankLinesBetweenMembers = true;
            options.BracingStyle = "Block";
            options.ElseOnClosing = false;
            options.IndentString = "    ";

            provider.GenerateCodeFromCompileUnit(unit, outputCode, options);

            TestConditions(outputCode.ToString());
        }

        /// <summary>
        ///A test for GenerateLoadRss (CodeTypeDeclaration, string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateLoadRssTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            string url = RssUtility.RssUrl;
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateLoadRss(rssType, url);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("LoadRss", rssType.Members[0].Name);
        }

        /// <summary>
        ///A test for GenerateLoadRssByUrl (CodeTypeDeclaration)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateLoadRssByUrlTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateLoadRssByUrl(rssType);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("LoadRss", rssType.Members[0].Name);
        }

        /// <summary>
        ///A test for GenerateLoadRssByXmlDocument (CodeTypeDeclaration)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateLoadRssByXmlDocumentTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateLoadRssByXmlDocument(rssType);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("LoadRss", rssType.Members[0].Name);
        }

        /// <summary>
        ///A test for GenerateLoadRssFromOpml (CodeTypeDeclaration)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateLoadRssFromOpmlTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateLoadRssFromOpml(rssType);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("LoadRssFromOpml", rssType.Members[0].Name);
        }

        /// <summary>
        ///A test for GenerateLoadRssItems (CodeTypeDeclaration, string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateLoadRssItemsTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            string itemTypeName = "TestItem";
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateLoadRssItems(rssType, itemTypeName);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("LoadRssItems", rssType.Members[0].Name); 
        }

        /// <summary>
        ///A test for GenerateToDataSet (CodeTypeDeclaration)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateToDataSetTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateToDataSet(rssType);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("ToDataSet", rssType.Members[0].Name); 
        }

        /// <summary>
        ///A test for GenerateToXml (CodeTypeDeclaration)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorGenerateToXmlTest()
        {
            CodeTypeDeclaration rssType = new CodeTypeDeclaration("TestRss");
            RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.GenerateToXml(rssType);
            Assert.IsTrue(rssType.Members.Count > 0);
            Assert.Equals("ToXml", rssType.Members[0].Name); 
        }

        /// <summary>
        ///A test for NamespaceContainsType (CodeNamespace, string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorNamespaceContainsTypeTest()
        {
            CodeNamespace generatedNamespace = new CodeNamespace("Test");
            CodeTypeDeclaration itemType = new CodeTypeDeclaration("Rss");
            generatedNamespace.Types.Add(itemType);
            itemType = new CodeTypeDeclaration("Channel");
            generatedNamespace.Types.Add(itemType);
            Assert.IsTrue(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.NamespaceContainsType(generatedNamespace, "Rss"));
            Assert.IsTrue(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.NamespaceContainsType(generatedNamespace, "Channel"));
            Assert.IsFalse(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.NamespaceContainsType(generatedNamespace, "Item"));
        }

        /// <summary>
        ///A test for TypeContainsProperty (CodeTypeDeclaration, string)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssCodeGeneratorTypeContainsPropertyTest()
        {
            CodeTypeDeclaration type = new CodeTypeDeclaration("Rss");
            type.Members.Add(new CodeMemberField(new CodeTypeReference("System.String"), "Test1"));
            type.Members.Add(new CodeMemberField(new CodeTypeReference("System.String"), "Test2"));

            Assert.IsTrue(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.TypeContainsProperty(type, "Test1"));
            Assert.IsTrue(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.TypeContainsProperty(type, "Test2"));
            Assert.IsFalse(RssToolkitUnitTest.RssToolkit_Rss_CodeGeneration_RssCodeGeneratorAccessor.TypeContainsProperty(type, "Test3"));

        }

        private void TestConditions(string code)
        {
            Assert.IsTrue(code.Length > 0);
            Assert.IsTrue(code.Contains("public class TestRss : RssToolkit.Rss.RssDocumentBase"));
            Assert.IsTrue(code.Contains("public TestChannel Channel"));
            Assert.IsTrue(code.Contains("public static TestRss LoadRss(string url)"));
            Assert.IsTrue(code.Contains("public class TestChannel"));
            Assert.IsTrue(code.Contains("public class TestHttpHandlerBase : RssToolkit.Rss.RssHttpHandlerBase<TestRss>"));
        }
    }
}
