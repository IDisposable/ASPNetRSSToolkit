// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using RssToolkit.Rss;
using System.Data;
using RssToolkitUnitTest.Utility;
namespace RssToolkitUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Rss.RssXmlHelper and is intended
    ///to contain all RssToolkit.Rss.RssXmlHelper Unit Tests
    ///</summary>
    [TestClass()]
    public class RssXmlHelperTest
    {
        private TestContext testContextInstance;
        private string rssXml = RssToolkitUnitTest.Utility.RssUtility.RssXml;
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DeserializeFromXmlUsingStringReader&lt;&gt; (string)
        ///</summary>
        [TestMethod()]
        public void RssXmlHelperDeserializeFromXmlUsingStringReaderTest()
        {

            RssDocument rss = RssXmlHelper.DeserializeFromXmlUsingStringReader<RssDocument>(rssXml);

            Assert.IsTrue(rss.Channel.Items.Count == 1, "RssToolkit.RssRssXmlHelper.DeserializeFromXmlUsingStringReader did not return the expected value.");
            Assert.IsTrue(rss.Channel.Title == "Yahoo! News: Top Stories", "RssToolkit.Rss.RssXmlHelper.DeserializeFromXmlUsingStringReader did not return the expected value.");
        }

        /// <summary>
        ///A test for GetDocumentType (string, out string)
        ///</summary>
        [TestMethod()]
        public void RssXmlHelperGetDocumentTypeTest()
        {
            string rssUrl = RssUtility.RssUrl;

            string opmlUrl = RssUtility.OpmlUrl;
            string xml;
            DocumentType actual = RssToolkit.Rss.RssXmlHelper.GetDocumentType(rssUrl, out xml);
            RssDocument rss = RssXmlHelper.DeserializeFromXmlUsingStringReader<RssDocument>(xml);

            Assert.IsTrue(actual == DocumentType.Rss, "RssToolkit.Rss.RssXmlHelper.GetDocumentType did not return the expected value.");
            Assert.IsTrue(rss.Channel.Items.Count > 0, "RssToolkit.Rss.RssXmlHelper.GetDocumentType did not return the expected value.");

            actual = RssToolkit.Rss.RssXmlHelper.GetDocumentType(opmlUrl, out xml);
            rss.LoadFromOpmlXml(xml);

            Assert.IsTrue(actual == DocumentType.Opml, "RssToolkit.Rss.RssXmlHelper.GetDocumentType did not return the expected value.");
            Assert.IsTrue(rss.Channel.Items.Count > 0, "RssToolkit.Rss.RssXmlHelper.GetDocumentType did not return the expected value.");
        }

        /// <summary>
        ///A test for LoadRssFromOpmlUrl&lt;&gt; (string)
        ///</summary>
        [TestMethod()]
        public void RssXmlHelperLoadRssFromOpmlUrlTest()
        {
            string opmlUrl = RssUtility.OpmlUrl;
            RssDocument rss = new RssDocument();
            rss.LoadFromOpmlUrl(opmlUrl);
            Assert.IsTrue(rss.Channel.Items.Count > 0, "RssToolkit.Rss.RssXmlHelper.GetDocumentType did not return the expected value.");
        }

        /// <summary>
        ///A test for ToDataSet (string)
        ///</summary>
        [TestMethod()]
        public void RssXmlHelperToDataSetTest()
        {
           DataSet actual = RssToolkit.Rss.RssXmlHelper.ToDataSet(rssXml);

            Assert.IsTrue(actual.Tables.Count > 0, "RssToolkit.Rss.RssXmlHelper.ToDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables["item"].Rows.Count == 1, "RssToolkit.Rss.RssXmlHelper.ToDataSet did not return the expected value.");
        }

        /// <summary>
        ///A test for ToXml&lt;&gt; (T)
        ///</summary>
        [TestMethod()]
        public void RssXmlHelperToXmlTest()
        {
            string rssUrl = "http://rss.msnbc.msn.com/id/3032091/device/rss/rss.xml";
            RssDocument rss = new RssDocument();
            rss.LoadFromUrl(rssUrl);
            string xml = RssXmlHelper.ToXml<RssDocument>(rss);
            Assert.IsFalse(string.IsNullOrEmpty(xml), "RssToolkit.Rss.RssXmlHelper.ToXml did not return the expected value.");
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(xml);
            Assert.IsTrue(xmlDocument.DocumentElement.LocalName.Equals("rss", StringComparison.OrdinalIgnoreCase), "RssToolkit.Rss.RssXmlHelper.ToXml did not return the expected value.");
            Assert.IsTrue(xmlDocument.SelectNodes("/rss/channel/item").Count > 0, "RssToolkit.Rss.RssXmlHelper.ToXml did not return the expected value.");
        }
    }
}
