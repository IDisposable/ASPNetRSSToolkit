// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using RssToolkit.Rss;
using System.Data;
using System.Xml;
using RssToolkitUnitTest.Utility;

namespace RssToolkitUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Rss.RssDocument and is intended
    ///to contain all RssToolkit.Rss.RssDocument Unit Tests
    ///</summary>
    [TestClass()]
    public class RssDocumentTest
    {
        private TestContext testContextInstance;
        private static RssDocument rss;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            rss = RssToolkitUnitTest.Utility.RssUtility.GetRssDocumentFromXml();
        }

        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        /// <summary>
        ///A test for Channel
        ///</summary>
        [TestMethod()]
        public void RssDocumentMultipleUrlTest()
        {
            foreach (string url in RssUtility.RssUrls)
            {
                rss.LoadFromUrl(url);
                Assert.IsTrue(rss.Channel.Items.Count > 0);
            }
        }

        /// <summary>
        ///A test for Channel
        ///</summary>
        [TestMethod()]
        public void RssDocumentChannelTest()
        {
            Assert.AreEqual(rss.Channel.Categories[0].Domain, "http://www.microsoft.com");
            Assert.AreEqual(rss.Channel.Categories[1].Domain, "http://www.yahoo.com");
            Assert.AreEqual(rss.Channel.Categories[0].Text, "MSFT");
            Assert.AreEqual(rss.Channel.Categories[1].Text, "YHOO");
            Assert.AreEqual(rss.Channel.Cloud.Domain, "rpc.sys.com");
            Assert.AreEqual(rss.Channel.Cloud.Path, "/RPC2");
            Assert.AreEqual(rss.Channel.Cloud.Port, "80");
            Assert.AreEqual(rss.Channel.Cloud.Protocol, "soap");
            Assert.AreEqual(rss.Channel.Cloud.RegisterProcedure, "pingMe");
            Assert.AreEqual("Copyright (c) 2007 Yahoo! Inc. All rights reserved.", rss.Channel.Copyright);
            Assert.AreEqual("Top Stories", rss.Channel.Description);
            Assert.AreEqual("http://blogs.law.harvard.edu/tech/rss", rss.Channel.Docs);
            Assert.AreEqual("MightyInHouse Content System v2.3", rss.Channel.Generator);
            Assert.AreEqual("Yahoo News on the hour.", rss.Channel.Image.Description, "RssToolkit.Rss.RssImage.Description was not set correctly.");
            Assert.AreEqual("18", rss.Channel.Image.Height, "RssToolkit.Rss.RssImage.Height was not set correctly.");
            Assert.AreEqual("http://news.yahoo.com/i/716", rss.Channel.Image.Link, "RssToolkit.Rss.RssImage.Link was not set correctly.");
            Assert.AreEqual("Yahoo! News", rss.Channel.Image.Title, "RssToolkit.Rss.RssImage.Title was not set correctly.");
            Assert.AreEqual("http://us.i1.yimg.com/us.yimg.com/i/us/nws/th/main_142b.gif", rss.Channel.Image.Url, "RssToolkit.Rss.RssImage.Url was not set correctly.");
            Assert.AreEqual("142", rss.Channel.Image.Width, "RssToolkit.Rss.RssImage.Width was not set correctly.");
            Assert.AreEqual("someone@email.com", rss.Channel.Items[0].Author, "RssToolkit.Rss.RssItem.Author was not set correctly.");
            Assert.AreEqual(rss.Channel.Items[0].Categories[0].Domain, "http://www.google.com");
            Assert.AreEqual(rss.Channel.Items[0].Categories[1].Domain, "http://www.sun.com");
            Assert.AreEqual(rss.Channel.Items[0].Categories[0].Text, "GOOG");
            Assert.AreEqual(rss.Channel.Items[0].Categories[1].Text, "SUNW");
            Assert.AreEqual("This feed is from Yahoo News", rss.Channel.Items[0].Comments, "RssToolkit.Rss.RssItem.Comments was not set correctly.");
            Assert.AreEqual("This is a feed description", rss.Channel.Items[0].Description, "RssToolkit.Rss.RssItem.Description was not set correctly.");
            Assert.AreEqual("12216320", rss.Channel.Items[0].Enclosure.Length, "RssToolkit.Rss.RssEnclosure.Length was not set correctly.");
            Assert.AreEqual("audio/mpeg", rss.Channel.Items[0].Enclosure.Type, "RssToolkit.Rss.RssEnclosure.Type was not set correctly.");
            Assert.AreEqual("http://www.scripting.com/mp3s/weatherReportSuite.mp3", rss.Channel.Items[0].Enclosure.Url, "RssToolkit.Rss.RssEnclosure.Url was not set correctly.");
            Assert.AreEqual("false", rss.Channel.Items[0].Guid.IsPermaLink, "RssToolkit.Rss.RssGuid.IsPermaLink was not set correctly.");
            Assert.AreEqual("ap/20070214/bush", rss.Channel.Items[0].Guid.Text, "RssToolkit.Rss.RssGuid.Text was not set correctly.");
            Assert.AreEqual("http://us.rd.yahoo.com/dailynews/rss/topstories/*http://news.yahoo.com/s/ap/20070214/ap_on_go_pr_wh/bush", rss.Channel.Items[0].Link, "RssToolkit.Rss.RssItem.Link was not set correctly.");
            Assert.AreEqual("Wed, 14 Feb 2007 23:05:49 GMT", rss.Channel.Items[0].PubDate, "RssToolkit.Rss.RssItem.PubDate was not set correctly.");
            Assert.AreEqual("Bush: Iran is source of deadly weapons", rss.Channel.Items[0].Title, "RssToolkit.Rss.RssItem.Title was not set correctly.");
            Assert.AreEqual("Wed, 14 Feb 2007 23:10:27 GMT", rss.Channel.LastBuildDate);
            Assert.AreEqual("http://news.yahoo.com/i/716", rss.Channel.Link);
            Assert.AreEqual("other@email.com", rss.Channel.ManagingEditor);
            Assert.AreEqual("Wed, 14 Feb 2007 23:05:49 GMT", rss.Channel.PubDate);
            Assert.AreEqual("10", rss.Channel.Rating);
            Assert.AreEqual("Tuesday", rss.Channel.SkipDays.Days[0], "RssToolkit.Rss.RssSkipHours.Hours was not set correctly.");
            Assert.AreEqual("Friday", rss.Channel.SkipDays.Days[1], "RssToolkit.Rss.RssSkipHours.Hours was not set correctly.");
            Assert.AreEqual("0", rss.Channel.SkipHours.Hours[0], "RssToolkit.Rss.RssSkipHours.Hours was not set correctly.");
            Assert.AreEqual("1", rss.Channel.SkipHours.Hours[1], "RssToolkit.Rss.RssSkipHours.Hours was not set correctly.");
            Assert.AreEqual("5", rss.Channel.TimeToLive);
            Assert.AreEqual("Yahoo! News: Top Stories", rss.Channel.Title);
            Assert.AreEqual("other2@email.com", rss.Channel.WebMaster);
            Assert.AreEqual("en-us", rss.Channel.Language);
            Assert.AreEqual("Explains the text input area.", rss.Channel.TextInput.Description, "RssToolkit.Rss.RssTextInput.Description was not set correctly.");
            Assert.AreEqual("The URL of the CGI script that processes text input requests.", rss.Channel.TextInput.Link, "RssToolkit.Rss.RssTextInput.Description was not set correctly.");
            Assert.AreEqual("The name of the text object in the text input area.", rss.Channel.TextInput.Name, "RssToolkit.Rss.RssTextInput.Description was not set correctly.");
            Assert.AreEqual("The label of the Submit button in the text input area.", rss.Channel.TextInput.Title, "RssToolkit.Rss.RssTextInput.Description was not set correctly.");
        }

        /// <summary>
        ///A test for LoadRss (string)
        ///</summary>
        [TestMethod()]
        public void RssDocumentLoadRssTest()
        {
            RssDocument actual = RssUtility.GetRssDocumentFromUrl();
            Assert.IsTrue(actual.Channel.Items.Count > 0, "RssToolkit.Rss.RssDocument.LoadRss did not return the expected value.");
        }

        /// <summary>
        ///A test for LoadRssFromOpml (string)
        ///</summary>
        [TestMethod()]
        public void RssDocumentLoadRssFromOpmlTest()
        {
            RssDocument actual = RssUtility.GetRssDocumentFromOpmlUrl();
            Assert.IsTrue(actual.Channel.Items.Count > 0, "RssToolkit.Rss.RssDocument.LoadRssFromOpml did not return the expected value.");
        }

        /// <summary>
        ///A test for LoadRssFromOpmlXml (string)
        ///</summary>
        [TestMethod()]
        public void RssDocumentLoadRssFromOpmlXmlTest()
        {
            RssDocument actual = RssUtility.GetRssDocumentFromOpmlXml();
            Assert.IsTrue(actual.Channel.Items.Count > 0, "RssToolkit.Rss.RssDocument.LoadRssFromOpmlXml did not return the expected value.");            
        }

        /// <summary>
        ///A test for LoadRssFromXml (string)
        ///</summary>
        [TestMethod()]
        public void RssDocumentLoadRssFromXmlTest()
        {
            RssDocument actual = RssUtility.GetRssDocumentFromXml();
            Assert.IsTrue(actual.Channel.Items.Count > 0, "RssToolkit.Rss.RssDocument.LoadRssFromXml did not return the expected value.");
        }

        /// <summary>
        ///A test for SelectItems ()
        ///</summary>
        [TestMethod()]
        public void RssDocumentSelectItemsTest()
        {
            RssDocument target = RssUtility.GetRssDocumentFromUrl();
            IEnumerable actual;
            actual = target.SelectItems();
            System.Data.DataView view = (System.Data.DataView)target.SelectItems();
            Assert.IsTrue(actual.GetEnumerator().MoveNext(), "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
            Assert.IsTrue(view.Table.Rows.Count > 0, "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
        }

        /// <summary>
        ///A test for SelectItems (int)
        ///</summary>
        [TestMethod()]
        public void RssDocumentSelectItemsTest1()
        {
            RssDocument target = RssUtility.GetRssDocumentFromUrl();
            int maxItems = 10;
            IEnumerable actual;
            actual = target.SelectItems(maxItems);
            System.Data.DataView view = (System.Data.DataView)target.SelectItems(maxItems);
            Assert.IsTrue(actual.GetEnumerator().MoveNext(), "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
            Assert.IsTrue(view.Table.Rows.Count == 10, "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
        }

        /// <summary>
        ///A test for SelectItems (int, bool)
        ///</summary>
        [TestMethod()]
        public void RssDocumentSelectItemsTest2()
        {
            RssDocument target = RssUtility.GetRssDocumentFromUrl();
            int maxItems = 10;
            bool reverseOrder = true;
            IEnumerable actual = target.SelectItems(maxItems, reverseOrder);
            System.Data.DataView view = (System.Data.DataView)target.SelectItems(maxItems, reverseOrder);
            Assert.IsTrue(actual.GetEnumerator().MoveNext(), "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
            Assert.IsTrue(view.Table.Rows.Count == 10, "RssToolkit.Rss.RssDocument.SelectItems did not return the expected value.");
        }       
        
        /// <summary>
        ///A test for ToDataSet&lt;&gt; (RssDocumentGeneric)
        ///</summary>
        [TestMethod()]
        public void RssDocumentToDataSetTest()
        {
            RssDocument rss = RssUtility.GetRssDocumentFromUrl();
            DataSet dataSet = rss.ToDataSet();
            Assert.IsTrue(dataSet.Tables["item"].Rows.Count > 0, "RssToolkit.Rss.RssDocument.ToDataSet did not return the expected value.");
        }

        /// <summary>
        ///A test for ToXml&lt;&gt; (RssDocumentGeneric)
        ///</summary>
        [TestMethod()]
        public void RssDocumentToXmlTest()
        {
            RssDocument rss = RssUtility.GetRssDocumentFromUrl();
            string xml = rss.ToXml();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xml);
            Assert.IsTrue(doc.SelectNodes("/rss/channel/item").Count > 0, "RssToolkit.Rss.RssDocument.ToXml did not return the expected value.");
        }

        /// <summary>
        ///A test for Url
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void RssDocumentUrlTest()
        {
            RssDocument target = RssUtility.GetRssDocumentFromUrl();
            string val = RssUtility.RssUrl;
            RssToolkitUnitTest.RssToolkit_Rss_RssDocumentAccessor accessor = new RssToolkitUnitTest.RssToolkit_Rss_RssDocumentAccessor(target);
            Assert.AreEqual(val, accessor.Url, "RssToolkit.Rss.RssDocument.Url was not set correctly.");
        }

        /// <summary>
        ///A test for Version
        ///</summary>
        [TestMethod()]
        public void RssDocumentVersionTest()
        {
            RssDocument target = RssUtility.GetRssDocumentFromUrl();
            Assert.AreEqual("2.0", target.Version, "RssToolkit.Rss.RssDocument.Version was not set correctly.");
            string val = "1.0";
            target.Version = val;
            Assert.AreEqual(val, target.Version, "RssToolkit.Rss.RssDocument.Version was not set correctly.");
        }
    }
}
