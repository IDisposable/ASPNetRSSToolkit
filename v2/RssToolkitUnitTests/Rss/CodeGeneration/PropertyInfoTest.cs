// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace FrameworkUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Rss.CodeGeneration.PropertyInfo and is intended
    ///to contain all RssToolkit.Rss.CodeGeneration.PropertyInfo Unit Tests
    ///</summary>
    [TestClass()]
    public class PropertyInfoTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for IsAttribute
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void IsAttributeTest()
        {
            string name = "url";
            bool isAttribute = false;
            object target = FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor.CreatePrivate(name, isAttribute);

            bool val = false;
            FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor accessor = new FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor(target);

            Assert.AreEqual(val, accessor.IsAttribute, "RssToolkit.Rss.CodeGeneration.PropertyInfo.IsAttribute was not set correctly.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void NameTest()
        {
            string name = "url";
            bool isAttribute = false;
            object target = FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor.CreatePrivate(name, isAttribute);

            string val = "url";
            FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor accessor = new FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor(target);

            Assert.AreEqual(val, accessor.Name, "RssToolkit.Rss.CodeGeneration.PropertyInfo.Name was not set correctly.");
        }

        /// <summary>
        ///A test for Occurrences
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void OccurancesTest()
        {
            string name = "url";
            bool isAttribute = true;
            object target = FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor.CreatePrivate(name, isAttribute);

            int val = 0;
            FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor accessor = new FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor(target);

            accessor.Occurrences = val;

            Assert.AreEqual(val, accessor.Occurrences, "RssToolkit.Rss.CodeGeneration.PropertyInfo.Occurrences was not set correctly.");
        }

        /// <summary>
        ///A test for PropertyInfo (string, bool)
        ///</summary>
        [DeploymentItem("RssToolkit.dll")]
        [TestMethod()]
        public void ConstructorTest()
        {
            string name = "url";
            bool isAttribute = true;
            object target = FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor.CreatePrivate(name, isAttribute);

            FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor accessor = new FrameworkUnitTest.RssToolkit_Rss_CodeGeneration_PropertyInfoAccessor(target);

            Assert.AreEqual(name, accessor.Name, "RssToolkit.Rss.CodeGeneration.PropertyInfo.Name was not set correctly.");
            Assert.AreEqual(isAttribute, accessor.IsAttribute, "RssToolkit.Rss.CodeGeneration.PropertyInfo.IsAttribute was not set correctly.");
            Assert.AreEqual(0, accessor.Occurrences, "RssToolkit.Rss.CodeGeneration.PropertyInfo.Occurrences was not set correctly.");
        }
    }
}
