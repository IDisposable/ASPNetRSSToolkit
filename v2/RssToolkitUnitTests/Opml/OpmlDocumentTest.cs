// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using RssToolkit.Opml;
namespace RssToolkitUnitTest
{
    /// <summary>
    ///This is a test class for RssToolkit.Opml.OpmlDocument and is intended
    ///to contain all RssToolkit.Opml.OpmlDocument Unit Tests
    ///</summary>
    [TestClass()]
    public class OpmlDocumentTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Body
        ///</summary>
        [TestMethod()]
        public void OpmlDocumentBodyTest()
        {
            OpmlDocument target = RssToolkitUnitTest.Utility.RssUtility.GetOpmlDocumentFromXml();

            Assert.IsTrue(target.Body.Outlines.Count > 0, "RssToolkit.Opml.OpmlDocument.Body was not set correctly.");
            Assert.AreEqual("BBC News | News Front Page | UK Edition", target.Body.Outlines[0].Text, "RssToolkit.Opml.OpmlDocument.Body was not set correctly.");
            Assert.AreEqual("CNET News.com", target.Body.Outlines[1].Text, "RssToolkit.Opml.OpmlDocument.Body was not set correctly.");
        }

        /// <summary>
        ///A test for Head
        ///</summary>
        [TestMethod()]
        public void OpmlDocumentHeadTest()
        {
            OpmlDocument target = RssToolkitUnitTest.Utility.RssUtility.GetOpmlDocumentFromXml();

            Assert.AreEqual("mySubscriptions.opml", target.Head.Title, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
            Assert.AreEqual("Sat, 18 Jun 2005 12:11:52 GMT", target.Head.DateCreated, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
            Assert.AreEqual("Tue, 02 Aug 2005 21:42:48 GMT", target.Head.DateModified, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
            Assert.AreEqual("http://www.microsoft.com", target.Head.Link, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
            Assert.AreEqual("someone@email.com", target.Head.OwnerEmail, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
            Assert.AreEqual("Some One", target.Head.OwnerName, "RssToolkit.Opml.OpmlDocument.Head was not set correctly.");
        }

        /// <summary>
        ///A test for LoadFromUrl (string)
        ///</summary>
        [TestMethod()]
        public void OpmlDocumentLoadFromUrlTest()
        {
            OpmlDocument actual = RssToolkitUnitTest.Utility.RssUtility.GetOpmlDocumentFromXml();
            Assert.IsTrue(actual.Body.Outlines.Count > 0, "RssToolkit.Opml.OpmlDocument.LoadFromUrl did not return the expected value.");
        }

        /// <summary>
        ///A test for LoadFromXml (string)
        ///</summary>
        [TestMethod()]
        public void OpmlDocumentLoadFromXmlTest()
        {
            OpmlDocument actual = RssToolkitUnitTest.Utility.RssUtility.GetOpmlDocumentFromXml();
            Assert.IsTrue(actual.Body.Outlines.Count == 2, "RssToolkit.Opml.OpmlDocument.LoadFromXml did not return the expected value.");
            Assert.AreEqual(actual.Head.Title, "mySubscriptions.opml", "RssToolkit.Opml.OpmlDocument.LoadFromXml did not return the expected value.");
            Assert.AreEqual(actual.Body.Outlines[0].XmlUrl, "http://news.bbc.co.uk/rss/newsonline_uk_edition/front_page/rss091.xml", "RssToolkit.Opml.OpmlDocument.LoadFromXml did not return the expected value.");
            Assert.AreEqual(actual.Body.Outlines[1].XmlUrl, "http://news.com.com/2547-1_3-0-5.xml", "RssToolkit.Opml.OpmlDocument.LoadFromXml did not return the expected value.");
        }

        /// <summary>
        ///A test for Version
        ///</summary>
        [TestMethod()]
        public void OpmlDocumentVersionTest()
        {
            OpmlDocument actual = RssToolkitUnitTest.Utility.RssUtility.GetOpmlDocumentFromXml();
            Assert.AreEqual("1.1", actual.Version, "RssToolkit.Opml.OpmlDocument.Version was not set correctly.");
        }
    }
}
