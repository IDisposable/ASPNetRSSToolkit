/*=======================================================================
  Copyright (C) Microsoft Corporation.  All rights reserved.
 
  THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
  PARTICULAR PURPOSE.
=======================================================================*/

using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Web;
using System.Web.Compilation;
using System.Web.Hosting;
using System.Xml;

namespace RssToolkit.Rss.CodeGeneration
{
    /// <summary>
    /// build provided for .rss file - channel definition in app_code
    /// generates strognly-typed channel type
    /// </summary>
    [BuildProviderAppliesTo(BuildProviderAppliesTo.Code)]
    public sealed class RssBuildProvider : BuildProvider
    {
        /// <summary>
        /// Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.
        /// </summary>
        /// <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
        public override void GenerateCode(AssemblyBuilder assemblyBuilder)
        {
            if (assemblyBuilder == null)
            {
                throw new ArgumentNullException("assemblyBuilder");
            }

            // get name and namespace from the filename
            string fname = VirtualPathUtility.GetFileName(VirtualPath);
            fname = fname.Substring(0, fname.LastIndexOf('.')); // no extension
            int i = fname.LastIndexOf('.');

            string name, ns;

            if (i < 0)
            {
                name = fname;
                ns = string.Empty;
            }
            else
            {
                name = fname.Substring(i + 1);
                ns = fname.Substring(0, i);
            }

            // load as XML
            XmlDocument doc = new XmlDocument();
            using (Stream s = OpenStream(VirtualPath))
            {
                doc.Load(s);
            }

            // compile the channel
            CodeCompileUnit ccu = new CodeCompileUnit();
            RssCodeGenerator.GenerateCodeDomTree(doc.OuterXml, string.Empty, ns, name, ccu, true);
            assemblyBuilder.AddCodeCompileUnit(this, ccu);
        }
    }
}
